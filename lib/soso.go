package lib

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"strconv"

	//"math"
	"net/http"
	"os"
	//"strconv"
	//"strings"
	//"time"
	//"../db/modes"
)
//搜狗
var parma = make(map[string]interface{})

func load(fileName string) (json string, err error) {
	filePtr2, err := os.Open(fileName)
	if err != nil {
		fmt.Println("打开文件错误，请查看:" + err.Error())
	}
	defer filePtr2.Close()
	res, err := ioutil.ReadAll(filePtr2)
	if err != nil {
		fmt.Println("json read err", err.Error())
		return
	}
	json = string(res)
	return
}
func init(){

	parmasJson, err := load("./config/soso.json")
	if err != nil {
		fmt.Println("Open file soso.json [Err:%s]", err.Error())
		return
		//panic("打开文件错误，请查看:" + err.Error())
	}
	err = json.Unmarshal([]byte(parmasJson), &parma)
	if err != nil {
		fmt.Println("parmasJson failed [Err:%s]", err.Error())
		return
		//panic("打开文件错误，请查看:" + err.Error())
	}
	return
}

type AutoGenerated struct {
	Status int `json:"status"`
	Desc string `json:"desc"`
	Failures []interface{} `json:"failures"`
	Oprs int `json:"oprs"`
	Oprtime int `json:"oprtime"`
	Quota int `json:"quota"`
	Rquota int `json:"rquota"`
	Data struct {
		AccountID int `json:"accountId"`
		AccountName string `json:"accountName"`
		Cost float64 `json:"cost"`
		Cpc float64 `json:"cpc"`
		Click int `json:"click"`
		EndDateStr string `json:"endDateStr"`
	} `json:"data"`
}


func (this *AutoGenerated)SoSo_Coust(time string) string {
	//var baidu modes.SicsData
	testApi := "https://xuriapi.p4p.sogou.com/api/v2/realtimereport/getAccountSummaryData"
	Date := time
	parma["body"].(map[string]interface{})["date"] = Date
	parma["body"].(map[string]interface{})["platform"] = 0
	//再把map 转为json
	jsonStr, err := json.Marshal(parma)
	if err != nil {
		fmt.Println("json write err", err.Error())
		//return ""
	}
	//发送http  post 请求
	req, err := http.NewRequest("POST", testApi, bytes.NewBuffer([]byte(jsonStr)))
	req.Header.Set("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("http请求异常", err.Error())
		return ""
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	fmt.Println("*****************",string(body))
	if err != nil {
		fmt.Println(err.Error())
		return ""
	}
	//fmt.Println(string(body))
	param := new(AutoGenerated)
	err = json.Unmarshal(body, &param)
	if err != nil {
		return ""
	}
	costs := param.Data.Cost * 100
	cost := strconv.FormatFloat( costs, 'f', -1, 64)
	return cost
}


func (this *AutoGenerated)SoSo_Click(time string) string {
	//var baidu modes.SicsData
	testApi := "https://xuriapi.p4p.sogou.com/api/v2/realtimereport/getAccountSummaryData"
	Date := time
	parma["body"].(map[string]interface{})["date"] = Date
	parma["body"].(map[string]interface{})["platform"] = 0
	//再把map 转为json
	jsonStr, err := json.Marshal(parma)
	if err != nil {
		fmt.Println("json write err", err.Error())
		//return ""
	}
	//发送http  post 请求
	req, err := http.NewRequest("POST", testApi, bytes.NewBuffer([]byte(jsonStr)))
	req.Header.Set("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("http请求异常", err.Error())
		return ""
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err.Error())
		return ""
	}
	//fmt.Println(string(body))
	param := new(AutoGenerated)
	err = json.Unmarshal(body, &param)
	if err != nil {
		return ""
	}
	click :=strconv.Itoa(param.Data.Click)
	return click
}


