package lib
import (
	//"crypto/md5"
	"encoding/json"
	"fmt"
	urlClient "net/url"
	//"io"
	//"url"
	"io/ioutil"
	"net/http"
	"sort"
	"strconv"
	"time"
)
//name直播间名称(最大40字符)
//desc直播间描述(做大字符5000)
//publisherpass (推流端密码,即讲师密码)
//playpass(播放端密码) 默认为空 不填写
//livestarttime(直播时间获取当前时间立即开播) "2015-01-02 12:30:01"
func Broadcast(name,desc,publisherpass,playpass,livestarttime string)(string,error){
	//retrun err
	timeStamp := time.Now().Unix()
	apiKey := "ozAKocejxzmen9RN7YR32mxIQ4rrAchi"
	params := map[string]string{
		"foreignpublish":   "0",
		"hideexitbutton":   "1",
		"hostloginmode":    "1",
		"livestarttime":    livestarttime,
		"name":             name,
		"openchatmanage":   "1",
		"openhostmode":     "0",
		"openlowdelaymode": "0",
		"opentextpiclive":  "0",
		"playpass":         playpass,
		"publisherpass":    publisherpass,
		"showusercount":    "1",
		"templatetype":     "2",
		"userid":           "5E9B3D487F0F2ECD",
		"warmvideoid":      "",
		"assistantpass":    "111",
		"authtype":         "2",
		"barrage":          "1",
		"checkurl":         "",
		"desc":             desc,
	}
	//type AutoGenerated struct {
	//	Result string `json:"result"`
	//	RoomID string `json:"roomId"`
	//	ClientLoginURL string `json:"clientLoginUrl"`
	//	AssistAntLoginURL string `json:"assist antLoginUrl"`
	//	ViewURL string `json:"viewUrl"`
	//	PublishUrls []interface{} `json:"publishUrls"`
	//}

	dataParams := urlClient.Values{}
	//ksort
	var keys []string
	for k := range params {
		keys = append(keys, k)
	}
	sort.Strings(keys)
	//拼接
	for _, k := range keys {
		dataParams.Add(k, params[k])
	}
	preCreateLiveUrl := dataParams.Encode()
	hashValue := StrMd5STR(preCreateLiveUrl + "&time=" + Stamp2Str(timeStamp) + "&salt=" + apiKey)
	createLiveUrl := "http://api.csslcloud.net/api/room/create?" + preCreateLiveUrl + "&time=" + Stamp2Str(timeStamp) + "&hash=" + hashValue

	client := &http.Client{}
	resp, err := client.Get(createLiveUrl)
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(string(body))
	var data map[string]interface{}
	var roomId interface{}
	//var roomId map[string]interface{}
	if err := json.Unmarshal([]byte(string(body)), &data); err == nil {
		myMap := (data["room"]).(map[string]interface{})
		roomId = (myMap["id"])
	}
	prePushUrl := "roomid=" + fmt.Sprintf("%v", roomId) + "&userid=5E9B3D487F0F2ECD" + "&time=" + Stamp2Str(timeStamp) + "&salt=" + apiKey
	publishUrlHash := StrMd5STR(prePushUrl)
	getPulishUrl := "http://api.csslcloud.net/api/room/code?roomid=" + fmt.Sprintf("%v", roomId) + "&userid=5E9B3D487F0F2ECD" + "&time=" + Stamp2Str(timeStamp) + "&hash=" + publishUrlHash

	resp1, err := client.Get(getPulishUrl)
	defer resp.Body.Close()
	body1, err := ioutil.ReadAll(resp1.Body)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(string(body1))
	return string(body1),nil

}

//func StrMd5STR(strPass string) string {
//	w := md5.New()
//	io.WriteString(w, strPass)
//	return fmt.Sprintf("%X", w.Sum(nil))
//}
func Stamp2Str(stamp int64) string {
	return strconv.FormatInt(stamp, 10)
}
